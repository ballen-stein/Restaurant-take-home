// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.company.takehome.network.places.models

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class PlacesRestaurantJsonAdapter(
  moshi: Moshi
) : JsonAdapter<PlacesRestaurant>() {
  private val options: JsonReader.Options = JsonReader.Options.of("place_id", "name", "photos",
      "rating")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "id")

  private val listOfRestaurantPhotoAdapter: JsonAdapter<List<RestaurantPhoto>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, RestaurantPhoto::class.java),
      emptySet(), "photos")

  @Volatile
  private var constructorRef: Constructor<PlacesRestaurant>? = null

  public override fun toString(): String = buildString(38) {
      append("GeneratedJsonAdapter(").append("PlacesRestaurant").append(')') }

  public override fun fromJson(reader: JsonReader): PlacesRestaurant {
    var id: String? = null
    var name: String? = null
    var photos: List<RestaurantPhoto>? = null
    var rating: String? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> id = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("id", "place_id",
            reader)
        1 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        2 -> {
          photos = listOfRestaurantPhotoAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("photos", "photos", reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          rating = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("rating", "rating",
              reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffff3.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  PlacesRestaurant(
          id = id ?: throw Util.missingProperty("id", "place_id", reader),
          name = name ?: throw Util.missingProperty("name", "name", reader),
          photos = photos as List<RestaurantPhoto>,
          rating = rating as String
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<PlacesRestaurant> = this.constructorRef ?:
          PlacesRestaurant::class.java.getDeclaredConstructor(String::class.java,
          String::class.java, List::class.java, String::class.java, Int::class.javaPrimitiveType,
          Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
      return localConstructor.newInstance(
          id ?: throw Util.missingProperty("id", "place_id", reader),
          name ?: throw Util.missingProperty("name", "name", reader),
          photos,
          rating,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: PlacesRestaurant?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("place_id")
    stringAdapter.toJson(writer, value_.id)
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("photos")
    listOfRestaurantPhotoAdapter.toJson(writer, value_.photos)
    writer.name("rating")
    stringAdapter.toJson(writer, value_.rating)
    writer.endObject()
  }
}
