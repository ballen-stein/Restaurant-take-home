// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.company.takehome.network.places.models

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

public class PlacesResponseJsonAdapter(
  moshi: Moshi
) : JsonAdapter<PlacesResponse>() {
  private val options: JsonReader.Options = JsonReader.Options.of("results", "next_page_token")

  private val listOfPlacesRestaurantAdapter: JsonAdapter<List<PlacesRestaurant>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, PlacesRestaurant::class.java),
      emptySet(), "restaurants")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "nextPageToken")

  @Volatile
  private var constructorRef: Constructor<PlacesResponse>? = null

  public override fun toString(): String = buildString(36) {
      append("GeneratedJsonAdapter(").append("PlacesResponse").append(')') }

  public override fun fromJson(reader: JsonReader): PlacesResponse {
    var restaurants: List<PlacesRestaurant>? = null
    var nextPageToken: String? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          restaurants = listOfPlacesRestaurantAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("restaurants", "results", reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          nextPageToken = stringAdapter.fromJson(reader) ?:
              throw Util.unexpectedNull("nextPageToken", "next_page_token", reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    if (mask0 == 0xfffffffc.toInt()) {
      // All parameters with defaults are set, invoke the constructor directly
      return  PlacesResponse(
          restaurants = restaurants as List<PlacesRestaurant>,
          nextPageToken = nextPageToken as String
      )
    } else {
      // Reflectively invoke the synthetic defaults constructor
      @Suppress("UNCHECKED_CAST")
      val localConstructor: Constructor<PlacesResponse> = this.constructorRef ?:
          PlacesResponse::class.java.getDeclaredConstructor(List::class.java, String::class.java,
          Int::class.javaPrimitiveType, Util.DEFAULT_CONSTRUCTOR_MARKER).also {
          this.constructorRef = it }
      return localConstructor.newInstance(
          restaurants,
          nextPageToken,
          mask0,
          /* DefaultConstructorMarker */ null
      )
    }
  }

  public override fun toJson(writer: JsonWriter, value_: PlacesResponse?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("results")
    listOfPlacesRestaurantAdapter.toJson(writer, value_.restaurants)
    writer.name("next_page_token")
    stringAdapter.toJson(writer, value_.nextPageToken)
    writer.endObject()
  }
}
