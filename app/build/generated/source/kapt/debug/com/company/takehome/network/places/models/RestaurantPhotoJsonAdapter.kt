// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.company.takehome.network.places.models

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class RestaurantPhotoJsonAdapter(
  moshi: Moshi
) : JsonAdapter<RestaurantPhoto>() {
  private val options: JsonReader.Options = JsonReader.Options.of("photo_reference", "height",
      "width")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "photoReference")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "height")

  public override fun toString(): String = buildString(37) {
      append("GeneratedJsonAdapter(").append("RestaurantPhoto").append(')') }

  public override fun fromJson(reader: JsonReader): RestaurantPhoto {
    var photoReference: String? = null
    var height: Int? = null
    var width: Int? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> photoReference = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("photoReference", "photo_reference", reader)
        1 -> height = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("height", "height",
            reader)
        2 -> width = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("width", "width",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return RestaurantPhoto(
        photoReference = photoReference ?: throw Util.missingProperty("photoReference",
            "photo_reference", reader),
        height = height ?: throw Util.missingProperty("height", "height", reader),
        width = width ?: throw Util.missingProperty("width", "width", reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: RestaurantPhoto?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("photo_reference")
    stringAdapter.toJson(writer, value_.photoReference)
    writer.name("height")
    intAdapter.toJson(writer, value_.height)
    writer.name("width")
    intAdapter.toJson(writer, value_.width)
    writer.endObject()
  }
}
